import os
import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import sqlite3

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
os.makedirs('user_images', exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('images.db')
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_images (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            file_id TEXT,
            file_path TEXT,
            image_name TEXT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ image_name –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    try:
        cursor.execute("SELECT image_name FROM user_images LIMIT 1")
    except sqlite3.OperationalError:
        # –ö–æ–ª–æ–Ω–∫–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
        cursor.execute('ALTER TABLE user_images ADD COLUMN image_name TEXT')
    
    conn.commit()
    conn.close()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤ –ë–î
def save_image_info(user_id, file_id, file_path, image_name=None):
    conn = sqlite3.connect('images.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO user_images (user_id, file_id, file_path, image_name)
        VALUES (?, ?, ?, ?)
    ''', (user_id, file_id, file_path, image_name))
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_images(user_id):
    conn = sqlite3.connect('images.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT id, file_id, file_path, image_name FROM user_images 
        WHERE user_id = ? ORDER BY timestamp DESC
    ''', (user_id,))
    images = cursor.fetchall()
    conn.close()
    return images

# –ü–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ ID
def get_image_by_id(user_id, image_id):
    conn = sqlite3.connect('images.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT id, file_id, file_path, image_name FROM user_images 
        WHERE user_id = ? AND id = ?
    ''', (user_id, image_id))
    image = cursor.fetchone()
    conn.close()
    return image

# –ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–æ–∏—Å–∫–æ–º
def get_main_keyboard():
    keyboard = [
        [KeyboardButton("üì∏ –ú–æ–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"), KeyboardButton("üîç –ü–æ–∏—Å–∫ —Ñ–æ—Ç–æ")],
        [KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞
def get_search_keyboard():
    keyboard = [
        [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        'üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n\n'
        'üì∏ **–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ** - —è –µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—é\n'
        'üìù **–•–æ—á–µ—à—å –¥–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ?** –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–µ —Å —Ñ–æ—Ç–æ\n\n'
        'üí° **–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n'
        '‚Ä¢ "üì∏ –ú–æ–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" - –≤—Å–µ —Ç–≤–æ–∏ —Ñ–æ—Ç–æ\n'
        '‚Ä¢ "üîç –ü–æ–∏—Å–∫ —Ñ–æ—Ç–æ" - –Ω–∞–π—Ç–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n'
        '‚Ä¢ "‚ùì –ü–æ–º–æ—â—å" - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º',
        reply_markup=get_main_keyboard(),
        parse_mode='Markdown'
    )

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        'üìñ **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**\n\n'
        'üíæ **–ó–∞–≥—Ä—É–∑–∫–∞:**\n'
        '‚Ä¢ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ - —Å–æ—Ö—Ä–∞–Ω—é –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è\n'
        '‚Ä¢ –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é - —Å–æ—Ö—Ä–∞–Ω—é —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º\n\n'
        'üìÅ **–ü—Ä–æ—Å–º–æ—Ç—Ä –∏ –ø–æ–∏—Å–∫:**\n'
        '‚Ä¢ "üì∏ –ú–æ–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" - –≤—Å–µ —Ç–≤–æ–∏ —Ñ–æ—Ç–æ\n'
        '‚Ä¢ "üîç –ü–æ–∏—Å–∫ —Ñ–æ—Ç–æ" - –Ω–∞–π—Ç–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n'
        '‚Ä¢ /get ID - –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –ø–æ –Ω–æ–º–µ—Ä—É\n'
        '‚Ä¢ /find –Ω–∞–∑–≤–∞–Ω–∏–µ - –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n\n'
        '‚ö° **–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!**',
        reply_markup=get_main_keyboard(),
        parse_mode='Markdown'
    )

# –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫
async def start_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        'üîç **–ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π**\n\n'
        '–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n'
        '(–Ω–∞–ø—Ä–∏–º–µ—Ä: "–∫–æ—Ç–∏–∫", "–æ—Ç–ø—É—Å–∫", "–¥–æ–∫—É–º–µ–Ω—Ç")',
        reply_markup=get_search_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Ç–µ–∫—Å—Ç–æ–º (–Ω–∞–∑–≤–∞–Ω–∏–µ–º)
async def handle_photo_with_caption(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.message.from_user.id
        photo = update.message.photo[-1]
        image_name = update.message.caption
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
        photo_file = await photo.get_file()
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        file_extension = '.jpg'
        filename = f"user_{user_id}_{photo.file_id}{file_extension}"
        file_path = os.path.join('user_images', filename)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        await photo_file.download_to_drive(file_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ë–î
        save_image_info(user_id, photo.file_id, file_path, image_name)
        
        await update.message.reply_text(
            f'‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n'
            f'üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {image_name}\n'
            f'üÜî ID: {len(get_user_images(user_id))}',
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        logger.error(f"Error in handle_photo_with_caption: {e}")
        await update.message.reply_text(
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
            reply_markup=get_main_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
async def handle_photo_without_caption(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.message.from_user.id
        photo = update.message.photo[-1]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
        photo_file = await photo.get_file()
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        file_extension = '.jpg'
        filename = f"user_{user_id}_{photo.file_id}{file_extension}"
        file_path = os.path.join('user_images', filename)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        await photo_file.download_to_drive(file_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ë–î
        save_image_info(user_id, photo.file_id, file_path)
        
        await update.message.reply_text(
            f'‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n'
            f'üÜî ID: {len(get_user_images(user_id))}\n'
            f'üí° –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ñ–æ—Ç–æ - —Ç–∞–∫ –±—É–¥–µ—Ç –ª–µ–≥—á–µ –Ω–∞–π—Ç–∏!',
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        logger.error(f"Error in handle_photo_without_caption: {e}")
        await update.message.reply_text(
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
            reply_markup=get_main_keyboard()
        )

# –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def my_images(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.message.from_user.id
        images = get_user_images(user_id)
        
        if not images:
            await update.message.reply_text(
                'üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n'
                '–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ! üì∏',
                reply_markup=get_main_keyboard()
            )
            return
        
        message = "üì∏ **–¢–≤–æ–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:**\n\n"
        for i, (img_id, file_id, file_path, image_name) in enumerate(images, 1):
            name = image_name if image_name else f"–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            message += f"{i}. {name} (ID: {img_id})\n"
        
        message += "\nüí° **–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:**\n"
        message += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π /get ID (–Ω–∞–ø—Ä–∏–º–µ—Ä: /get 1)\n"
        message += "‚Ä¢ –ò–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É 'üîç –ü–æ–∏—Å–∫ —Ñ–æ—Ç–æ' –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"
        
        await update.message.reply_text(
            message,
            reply_markup=get_main_keyboard(),
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"Error in my_images: {e}")
        await update.message.reply_text(
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
            reply_markup=get_main_keyboard()
        )

# –ü–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ ID
async def get_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.message.from_user.id
        
        if not context.args:
            await update.message.reply_text(
                '‚ùå –£–∫–∞–∂–∏ ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä: /get 1\n'
                'üí° –ò—Å–ø–æ–ª—å–∑—É–π /myimages —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å ID',
                reply_markup=get_main_keyboard()
            )
            return
        
        image_id = int(context.args[0])
        image = get_image_by_id(user_id, image_id)
        
        if not image:
            await update.message.reply_text(
                f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å ID {image_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                reply_markup=get_main_keyboard()
            )
            return
        
        img_id, file_id, file_path, image_name = image
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        with open(file_path, 'rb') as photo:
            caption = f"üì∏ {image_name}" if image_name else f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ID: {img_id}"
            await update.message.reply_photo(
                photo=photo,
                caption=caption,
                reply_markup=get_main_keyboard()
            )
            
    except ValueError:
        await update.message.reply_text(
            '‚ùå –í–≤–µ–¥–∏ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π ID (—Ü–∏—Ñ—Ä—É)',
            reply_markup=get_main_keyboard()
        )
    except FileNotFoundError:
        await update.message.reply_text(
            '‚ùå –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω',
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        logger.error(f"Error in get_image: {e}")
        await update.message.reply_text(
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
            reply_markup=get_main_keyboard()
        )

# –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–∫–æ–º–∞–Ω–¥–∞)
async def find_images(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.message.from_user.id
        
        if not context.args:
            await update.message.reply_text(
                '‚ùå –£–∫–∞–∂–∏ —á—Ç–æ –∏—Å–∫–∞—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä: /find –∫–æ—Ç–∏–∫\n'
                'üí° –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É "üîç –ü–æ–∏—Å–∫ —Ñ–æ—Ç–æ"',
                reply_markup=get_main_keyboard()
            )
            return
        
        search_term = ' '.join(context.args).lower()
        await perform_search(update, user_id, search_term)
        
    except Exception as e:
        logger.error(f"Error in find_images: {e}")
        await update.message.reply_text(
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ',
            reply_markup=get_main_keyboard()
        )

# –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
async def perform_search(update, user_id, search_term):
    images = get_user_images(user_id)
    
    # –ò—â–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º
    found_images = []
    for img in images:
        img_id, file_id, file_path, image_name = img
        if image_name and search_term in image_name.lower():
            found_images.append(img)
    
    if not found_images:
        await update.message.reply_text(
            f'üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É "{search_term}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n'
            f'üí° –ü–æ–ø—Ä–æ–±—É–π:\n'
            f'‚Ä¢ –î—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ\n'
            f'‚Ä¢ –ß–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è\n'
            f'‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ "üì∏ –ú–æ–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"',
            reply_markup=get_main_keyboard()
        )
        return
    
    message = f"üîç **–ù–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_term}':**\n\n"
    for i, (img_id, file_id, file_path, image_name) in enumerate(found_images, 1):
        message += f"{i}. {image_name} (ID: {img_id})\n"
    
    message += f"\nüí° **–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:**\n"
    message += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π /get ID (–Ω–∞–ø—Ä–∏–º–µ—Ä: /get {found_images[0][0]})\n"
    message += f"‚Ä¢ –ò–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π –ø–æ–∏—Å–∫"
    
    await update.message.reply_text(
        message,
        reply_markup=get_main_keyboard(),
        parse_mode='Markdown'
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = update.message.text
        user_id = update.message.from_user.id
        
        if text == "üì∏ –ú–æ–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è":
            await my_images(update, context)
        elif text == "üîç –ü–æ–∏—Å–∫ —Ñ–æ—Ç–æ":
            await start_search(update, context)
        elif text == "‚ùì –ü–æ–º–æ—â—å":
            await help_command(update, context)
        elif text == "üîô –ù–∞–∑–∞–¥":
            await update.message.reply_text(
                "üëå –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                reply_markup=get_main_keyboard()
            )
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞ (–æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞)
            if update.message.reply_to_message and "–ø–æ–∏—Å–∫" in update.message.reply_to_message.text.lower():
                await perform_search(update, user_id, text)
            else:
                await update.message.reply_text(
                    'ü§î –ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ! üì∏\n\n'
                    'üí° **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n'
                    '/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n'
                    '/myimages - –º–æ–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n'
                    '/get ID - –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n'
                    '/find –Ω–∞–∑–≤–∞–Ω–∏–µ - –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n'
                    '/help - –ø–æ–º–æ—â—å',
                    reply_markup=get_main_keyboard()
                )
    except Exception as e:
        logger.error(f"Error in handle_text: {e}")
        await update.message.reply_text(
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞',
            reply_markup=get_main_keyboard()
        )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î (–≤–∞–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –≤ –Ω–∞—á–∞–ª–µ)
    init_db()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token("7727936798:AAHccQUPUSAXEACMZ9xJZiif3wkpWXdOE4A").build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("myimages", my_images))
    application.add_handler(CommandHandler("get", get_image))
    application.add_handler(CommandHandler("find", find_images))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–æ—Ç–æ (—Å –ø–æ–¥–ø–∏—Å—å—é –∏ –±–µ–∑)
    application.add_handler(MessageHandler(filters.PHOTO & filters.CAPTION, handle_photo_with_caption))
    application.add_handler(MessageHandler(filters.PHOTO & ~filters.CAPTION, handle_photo_without_caption))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    application.run_polling()

if __name__ == '__main__':
    main()
